1+2
PRINT()			# EMPTY PRINT
PRINT(SORT('b','a','c')+SORT('b','a','c',45,2))	#TESTING SORTS
PRINT(LT(2,3,4))	#TESTING LESS THAN
PRINT(2.72 % 2.5)	#MODULUS
PRINT(TRUE || FALSE)	# OR OPERATOR
PRINT(OR(false,false,false))
PRINT(TRUE && FALSE)	# AND OPERATOR
PRINT(AND(true,true,false))	
PRINT(AVG(-3+(-3),-6 / 5)) # AVERAGES
PRINT(EQ(1+4,2+(3)))	# EQUALS
PRINT(NEQ(1,1))	# NOT EQUALS
PRINT(NEQ(1,3,2)) # NOT EQUALS
PRINT(LEVEN("hello","hebbos"))	# LEVENSCHTEIN DISTANCE
PRINT("'"+'"')	# INTERCHANGABLE ' AND "
PRINT(SIZE("12345"))	#STRING SIZE
PRINT(SIZE("\\\\\\\\\""))	# TESTING ESCAPE CHARACTER
PRINT(SIZE("\F"))	# TESTING ESCAPE WITHOUT ACTUALLY ESCAPING ANYTHING
PRINT(SQRT(5.5))	# SQRT OPERATOR
PRINT(GETTIME())	# UNIX TIME FUNCTION
PRINT(-45 - 35)
PRINT(ABS(-34))		#ABSOLUTE VALUE
ADDDATA("testvar",(1 + 4 + "hello" + "world"))	# ADDING DATA TO SUPERGRAPH, STRING CONCATENATION
PRINT(testvar)		# DATA RETREIVAL DURING EVALUATION
ADDNODES("NODE1","NODE2","NODE3","NODE4","NODE5","NODE6","NODE7")	#ADDING NODES TO SUPERGRAPH
LISTNODES()		# LISTING ALL NODES
PRINTKEYS()		# LISTING ALL OBJECTS IN SUPERGRAPH
ADDDATA("n1",GETNODES())	# SAVING GROUPS OF NODES UNDER A VARIABLE
PRINT(n1)	# VERIFYING THE GROUP
ADDDATA("n2",GETNODES("NODE1","NODE3"))	# MAKING A SECOND GROUP
ADDDATA("two",2)
n1 --> n1   # adding connections using arrow operator
#ADDCONNECTIONS(n1,n1)	# ADDING CONNECTIONS TO SUPERGRAPH
PRINT(SIZE(GETCONNECTIONS()))
#PRINTKEYS()
PRINT("SIZE OF NODELIST: "+SIZE(n1))	
ADDNODEDATA(n1,"var1",123)
ADDNODEDATA(n2,"var1",321)
PRINT(QUERY(n1,"THIS.var1 == 321"))
PRINT(GETNODEDATA(n1,"var1"))
PRINT(NODE2.var1 + NODE3.var1 / two)
ADDNODEDATA(n1,"var2","hello")
#PRINT("STUFF: ",n,"var2")
#PRINT("STUFF: ",n,"name")
ADDGRAPHS("Testgraph")
PRINTKEYS()
PRINT(GETGRAPHS())
REMOVEGRAPHS()
PRINT(GETGRAPHS())
ADDCONNECTIONDATA(GETCONNECTIONS(),"c1",5)	# SET VARIABLE c1 to 5 for all connections
PRINT(SUM(GETCONNECTIONDATA(GETCONNECTIONS(),"c1")))	# SUM THE LIST OF DATA FROM ALL CONNECTIONS
PRINT(RANDOM(5))
PRINT(RANDOM(11,20))
PRINT(RANDOMINT(5.5))
# REMOVECONNECTIONS(GETCONNECTIONS())
# REMOVENODES(GETNODES())